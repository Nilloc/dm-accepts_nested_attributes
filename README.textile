h2. dm-accepts_nested_attributes

A DataMapper plugin that allows nested model attribute assignment like activerecord does.

Current documentation can always be found at "rdoc.info":http://rdoc.info/projects/snusnu/dm-accepts_nested_attributes

h3. Examples

The following example illustrates the use of this plugin.

<pre>
<code>
require "rubygems"

require "dm-core"
require "dm-validations"
require "dm-accepts_nested_attributes"

DataMapper::Logger.new(STDOUT, :debug)  
DataMapper.setup(:default, 'sqlite3::memory:')
  
class Person
  include DataMapper::Resource
  property :id,   Serial
  property :name, String
  has 1, :profile
  has n, :project_memberships
  has n, :projects, :through => :project_memberships

  accepts_nested_attributes_for :profile
  accepts_nested_attributes_for :projects

  # adds the following instance methods
  # #profile_attributes
  # #projects_attributes
end

class Profile
  include DataMapper::Resource
  property :id,      Serial
  property :person_id, Integer
  belongs_to :person

  accepts_nested_attributes_for :person

  # adds the following instance methods
  # #person_attributes
end

class Project
  include DataMapper::Resource
  property :id, Serial
  has n, :tasks
  has n, :project_memberships
  has n, :people, :through => :project_memberships

  accepts_nested_attributes_for :tasks
  accepts_nested_attributes_for :people
  
  # adds the following instance methods
  # #tasks_attributes
  # #people_attributes
end

class ProjectMembership
  include DataMapper::Resource
  property :id,         Serial
  property :person_id,  Integer
  property :project_id, Integer
  belongs_to :person
  belongs_to :project
end

class Task
  include DataMapper::Resource
  property :id,         Serial
  property :project_id, Integer
  belongs_to :project
end

DataMapper.auto_migrate!
</code>
</pre>

h2. Current limitations

There are some minor limitations at the moment but I'm sure these will resolve pretty soon.

h3. dm-constraints

Currently the spec suite runs with "dm-validations":http://github.com/datamapper/dm-more/tree/next and "dm-constraints":http://github.com/datamapper/dm-more/tree/next enabled to be able to catch all kinds of errors. However, if "dm-constraints":http://github.com/datamapper/dm-more/tree/next are disabled, there are currently a few problems, so expect the best results when you have "dm-constraints":http://github.com/datamapper/dm-more/tree/next enabled.

h3. dm-validations

Currently "my fork of dm-more":http://github.com/snusnu/dm-more/tree/validation_context_work is necessary for some of the features to work properly (mainly related to performing atomic commits and deleting nested models). I hope that this stuff gets merged into "dm-more":http://github.com/datamapper/dm-more/tree/next soon though.

h3. marking for destruction

@many_to_one, one_to_one and one_to_many@ relationships all perform the deleting of nested models by _marking them for destruction_. This means, that as long as you don't call #save on your resource, the nested models won't get destroyed. However, this is currently _not_ the case for @many_to_many@ relationships. The @join and target resources@ both get destroyed immediately when calling the nested attributes writer.

For the above example this would mean that when you issue the code below, it would result in immediate deletion of the intermediate @ProjectMembership@ and the @Project@ resource.

<pre>
<code>
person.projects_attributes = { :id => valid_project_id, :_delete => true }
</code>
</pre>

h2. TODO

* collect validation errors from related resources
* update README to include more complete usecases
* think about replacing :reject_if with :if and :unless
